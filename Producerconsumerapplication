/* Consumer.java */
package Producerconsumerapplication;

/**
 *
 * @author User
 */
public class Consumer implements Runnable{
    
    private  SharedQueue<Product> sharedBuffer;
    
    public Consumer(SharedQueue<Product> sharedBuffer){
        
        this.sharedBuffer=sharedBuffer;
        
        
    }   

    @Override
    public void run() {
        
        while(true){
            try{
            System.out.println("Consumed :"+ consume());
            
            Thread.sleep(100);
            
            }
            catch(InterruptedException e){
                
                e.printStackTrace();
                
            }
            
        }
       
    }
    
    
    private int consume() throws InterruptedException{
         
        /* Wait if buffer is empty  */
        
        while(sharedBuffer.isEmpty()){
            
            synchronized(sharedBuffer){
                
                System.out.println("Buffer is empty. "+Thread.currentThread().getName()+ " is waiting...");
                
                sharedBuffer.wait();
                
              }
            
            }
            
            /* otherwise consume  */
            
            synchronized(sharedBuffer){
                
                sharedBuffer.notifyAll();
                
                return sharedBuffer.remove().getId();
                
            }
            
            
        }
        
 }
 
 /* Producer.java */
 package Producerconsumerapplication;

/**
 *
 * @author User
 */
public class Producer implements Runnable{
    
    private  SharedQueue<Product> sharedBuffer;
    
    public Producer(SharedQueue<Product> sharedBuffer){
        
        this.sharedBuffer=sharedBuffer;
        
    }
    

    @Override
    public void run() {
        
        for(int i=1;i<=10;i++){
            
            try{
                produce(new Product(i));
                
                System.out.println("Produced: "+ i);
            
            }
            
            catch(InterruptedException e){
                e.printStackTrace();
                
            }
            
        }
    }
    
    private void produce(Product p)throws InterruptedException{
        
        /* Wait if buffer is full.  */
        
        while(sharedBuffer.isFull()){
            
            synchronized(sharedBuffer){
                
                System.out.println("Buffer is full."+Thread.currentThread().getName()+ " is waiting...");
                
                sharedBuffer.wait();
                
            }
            
        }
            
            /* Otherwise  produce and notify consumers */
            
            synchronized(sharedBuffer){
                
                sharedBuffer.add(p);
                
                sharedBuffer.notifyAll();
            }
            
            
        }
        
        
}

/* Product.java */

package Producerconsumerapplication;

/**
 *
 * @author User
 */
public class Producer implements Runnable{
    
    private  SharedQueue<Product> sharedBuffer;
    
    public Producer(SharedQueue<Product> sharedBuffer){
        
        this.sharedBuffer=sharedBuffer;
        
    }
    

    @Override
    public void run() {
        
        for(int i=1;i<=10;i++){
            
            try{
                produce(new Product(i));
                
                System.out.println("Produced: "+ i);
            
            }
            
            catch(InterruptedException e){
                e.printStackTrace();
                
            }
            
        }
    }
    
    private void produce(Product p)throws InterruptedException{
        
        /* Wait if buffer is full.  */
        
        while(sharedBuffer.isFull()){
            
            synchronized(sharedBuffer){
                
                System.out.println("Buffer is full."+Thread.currentThread().getName()+ " is waiting...");
                
                sharedBuffer.wait();
                
            }
            
        }
            
            /* Otherwise  produce and notify consumers */
            
            synchronized(sharedBuffer){
                
                sharedBuffer.add(p);
                
                sharedBuffer.notifyAll();
            }
            
            
        }
        
        
}

/* SharedQueue.java */

package Producerconsumerapplication;

import java.util.LinkedList;

/**
 *
 * @author User
 * @param <E>
 */
public class SharedQueue<E> {
    
    private LinkedList<E> list;
    
    private int size;
    
    
    public SharedQueue(){
        
    }
    
    public SharedQueue(int size){
        
        this.list=new LinkedList<>();
        this.size=size;
        
    }
    
    public void add(E e){
        
       list.add(e); 
    }
    
    public E remove(){
        return list.remove(0);
    }
    
    public boolean isFull(){
        
        return list.size()>=size;
    }
    
    public boolean isEmpty(){
       
        return list.isEmpty();
    }
    
    public int getsize(){
        return list.size();
    }
    
    
}

/* ProducerConsumerMain.java */

package Producerconsumerapplication;

/**
 *
 * @author User
 */
public class ProducerConsumerMain {
    
    public static void main(String[] args){
        
        
        final int SIZE =5;
        
        final SharedQueue<Product> sharedBuffer =new SharedQueue<>(SIZE);
        
        /* instantiating consumer and producer threads */
        
        
        Thread producer=new  Thread(new Producer(sharedBuffer), "Producer");
        
        Thread consumer=new  Thread(new Consumer(sharedBuffer), "Consumer");
        
        
        /* firing off threads */
        
        
        producer.start();
        
        consumer.start();
        
    }
    
}


 
